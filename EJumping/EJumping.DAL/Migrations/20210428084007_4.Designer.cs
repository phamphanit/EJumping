// <auto-generated />
using System;
using EJumping.DAL.EF.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EJumping.DAL.Migrations
{
    [DbContext(typeof(ejumpingContext))]
    [Migration("20210428084007_4")]
    partial class _4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Advertisement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("image_url");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("link_url");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("advertisement");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.DiceRound", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("FirstNumber")
                        .HasColumnType("integer")
                        .HasColumnName("first_number");

                    b.Property<DateTime>("RoundDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("round_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("integer")
                        .HasColumnName("round_number");

                    b.Property<int>("SecondNumber")
                        .HasColumnType("integer")
                        .HasColumnName("second_number");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.ToTable("dice_round");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.EmailVerification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("Expired")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expired");

                    b.Property<string>("IpAddress")
                        .HasColumnType("character varying")
                        .HasColumnName("ip_address");

                    b.Property<bool?>("IsSent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent");

                    b.Property<DateTime?>("LastFailed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_failed");

                    b.Property<int?>("NumFailed")
                        .HasColumnType("integer")
                        .HasColumnName("num_failed");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("character varying")
                        .HasColumnName("recipient_email");

                    b.Property<DateTime?>("Requested")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("requested");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("character varying")
                        .HasColumnName("verification_code");

                    b.HasKey("Id");

                    b.ToTable("email_verification");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.FxCandlestickRound", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Close")
                        .HasColumnType("numeric(13,5)")
                        .HasColumnName("close");

                    b.Property<decimal>("High")
                        .HasColumnType("numeric(13,5)")
                        .HasColumnName("high");

                    b.Property<decimal>("Low")
                        .HasColumnType("numeric(13,5)")
                        .HasColumnName("low");

                    b.Property<decimal>("Open")
                        .HasColumnType("numeric(13,5)")
                        .HasColumnName("open");

                    b.Property<DateTime>("RoundDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("round_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("integer")
                        .HasColumnName("round_number");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.ToTable("fx_candlestick_round");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Level", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int?>("MaxExp")
                        .HasColumnType("integer")
                        .HasColumnName("max_exp");

                    b.Property<int?>("MinExp")
                        .HasColumnType("integer")
                        .HasColumnName("min_exp");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("level");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.NewsComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("HiddenAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("hidden_at");

                    b.Property<string>("HiddenReason")
                        .HasColumnType("character varying")
                        .HasColumnName("hidden_reason");

                    b.Property<DateTime?>("LastReportedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_reported_at");

                    b.Property<long>("NewsId")
                        .HasColumnType("bigint")
                        .HasColumnName("news_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("news_comment");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.NewsCommentReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("NewsCommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("news_comment_id");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying")
                        .HasColumnName("reason");

                    b.Property<long?>("ReportedById")
                        .HasColumnType("bigint")
                        .HasColumnName("reported_by_id");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("NewsCommentId");

                    b.ToTable("news_comment_report");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.NewsLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("NewsId")
                        .HasColumnType("bigint")
                        .HasColumnName("news_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("news_like");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.PbGamebetWs", b =>
                {
                    b.Property<long>("BetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("bet_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("BetBall")
                        .HasColumnType("bigint")
                        .HasColumnName("bet_ball");

                    b.Property<int>("BetPbOddEven")
                        .HasColumnType("integer")
                        .HasColumnName("bet_pb_odd_even");

                    b.Property<int>("BetPbPrediction")
                        .HasColumnType("integer")
                        .HasColumnName("bet_pb_prediction");

                    b.Property<int>("BetPbUnderOver")
                        .HasColumnType("integer")
                        .HasColumnName("bet_pb_under_over");

                    b.Property<int>("BetRbSumLowHighMedium")
                        .HasColumnType("integer")
                        .HasColumnName("bet_rb_sum_low_high_medium");

                    b.Property<int>("BetRbSumLowHighMediumOddEven")
                        .HasColumnType("integer")
                        .HasColumnName("bet_rb_sum_low_high_medium_odd_even");

                    b.Property<int>("BetRbSumOddEven")
                        .HasColumnType("integer")
                        .HasColumnName("bet_rb_sum_odd_even");

                    b.Property<int>("BetRbSumUnderOver")
                        .HasColumnType("integer")
                        .HasColumnName("bet_rb_sum_under_over");

                    b.Property<int>("BetRbSumUnderOverOddEven")
                        .HasColumnType("integer")
                        .HasColumnName("bet_rb_sum_under_over_odd_even");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("game_date");

                    b.Property<long>("GameRoundId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_round_id");

                    b.Property<long>("HitBall")
                        .HasColumnType("bigint")
                        .HasColumnName("hit_ball");

                    b.Property<decimal>("HitOdds")
                        .HasColumnType("numeric")
                        .HasColumnName("hit_odds");

                    b.Property<int>("IsProvide")
                        .HasColumnType("integer")
                        .HasColumnName("is_provide");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("BetId")
                        .HasName("pb_gamebet_ws_pkey");

                    b.ToTable("pb_gamebet_ws");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.PbGameroundWs", b =>
                {
                    b.Property<DateTime>("GameDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("game_date");

                    b.Property<long>("GameRoundId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_round_id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("HitEventId1")
                        .HasColumnType("integer")
                        .HasColumnName("hit_event_id1");

                    b.Property<int>("HitEventId2")
                        .HasColumnType("integer")
                        .HasColumnName("hit_event_id2");

                    b.Property<int>("HitEventId3")
                        .HasColumnType("integer")
                        .HasColumnName("hit_event_id3");

                    b.Property<int>("HitEventId4")
                        .HasColumnType("integer")
                        .HasColumnName("hit_event_id4");

                    b.Property<int>("HitEventId5")
                        .HasColumnType("integer")
                        .HasColumnName("hit_event_id5");

                    b.Property<int>("IsProvide")
                        .HasColumnType("integer")
                        .HasColumnName("is_provide");

                    b.Property<int?>("Pb")
                        .HasColumnType("integer")
                        .HasColumnName("pb");

                    b.Property<int>("PbEventBetCount")
                        .HasColumnType("integer")
                        .HasColumnName("pb_event_bet_count");

                    b.Property<int>("PbOddBetCount")
                        .HasColumnType("integer")
                        .HasColumnName("pb_odd_bet_count");

                    b.Property<int>("PbOverBetCount")
                        .HasColumnType("integer")
                        .HasColumnName("pb_over_bet_count");

                    b.Property<int>("PbUnderBetCount")
                        .HasColumnType("integer")
                        .HasColumnName("pb_under_bet_count");

                    b.Property<int?>("Rb1")
                        .HasColumnType("integer")
                        .HasColumnName("rb1");

                    b.Property<int?>("Rb2")
                        .HasColumnType("integer")
                        .HasColumnName("rb2");

                    b.Property<int?>("Rb3")
                        .HasColumnType("integer")
                        .HasColumnName("rb3");

                    b.Property<int?>("Rb4")
                        .HasColumnType("integer")
                        .HasColumnName("rb4");

                    b.Property<int?>("Rb5")
                        .HasColumnType("integer")
                        .HasColumnName("rb5");

                    b.Property<int>("RbSumEventBetCount")
                        .HasColumnType("integer")
                        .HasColumnName("rb_sum_event_bet_count");

                    b.Property<int>("RbSumHighBetCount")
                        .HasColumnType("integer")
                        .HasColumnName("rb_sum_high_bet_count");

                    b.Property<int>("RbSumLowBetCount")
                        .HasColumnType("integer")
                        .HasColumnName("rb_sum_low_bet_count");

                    b.Property<int>("RbSumMediumBetCount")
                        .HasColumnType("integer")
                        .HasColumnName("rb_sum_medium_bet_count");

                    b.Property<int>("RbSumOddBetCount")
                        .HasColumnType("integer")
                        .HasColumnName("rb_sum_odd_bet_count");

                    b.Property<int>("RbSumOverBetCount")
                        .HasColumnType("integer")
                        .HasColumnName("rb_sum_over_bet_count");

                    b.Property<int>("RbSumUnderBetCount")
                        .HasColumnType("integer")
                        .HasColumnName("rb_sum_under_bet_count");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("GameDate", "GameRoundId")
                        .HasName("pb_gameround_ws_pkey");

                    b.ToTable("pb_gameround_ws");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CorrectAnswer")
                        .HasColumnType("integer");

                    b.Property<int>("CorrectAnswerPoints")
                        .HasColumnType("integer");

                    b.Property<string>("FirstOption")
                        .HasColumnType("text");

                    b.Property<string>("FourthOption")
                        .HasColumnType("text");

                    b.Property<string>("QuestionName")
                        .HasColumnType("text");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.Property<string>("SecondOption")
                        .HasColumnType("text");

                    b.Property<string>("ThirdOption")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "Would you like me to spell it?",
                            QuestionName = "Could you tell me your surname?",
                            QuizId = 1,
                            SecondOption = "Do you like my family name?",
                            ThirdOption = "How do I say that?"
                        },
                        new
                        {
                            Id = 2,
                            CorrectAnswer = 2,
                            CorrectAnswerPoints = 0,
                            FirstOption = "It's in the garden.",
                            QuestionName = "This plant looks dead.",
                            QuizId = 1,
                            SecondOption = "It only needs some water.",
                            ThirdOption = "It's sleeping."
                        },
                        new
                        {
                            Id = 3,
                            CorrectAnswer = 3,
                            CorrectAnswerPoints = 0,
                            FirstOption = "Of course not.",
                            QuestionName = "I hope it doesn't rain.",
                            QuizId = 1,
                            SecondOption = "Will it be wet?",
                            ThirdOption = "So do I."
                        },
                        new
                        {
                            Id = 4,
                            CorrectAnswer = 3,
                            CorrectAnswerPoints = 0,
                            FirstOption = "For ever.",
                            QuestionName = "Are you going to come inside soon?",
                            QuizId = 1,
                            SecondOption = "Not long.",
                            ThirdOption = "In a minute."
                        },
                        new
                        {
                            Id = 5,
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "I bought it.",
                            QuestionName = "Who gave you this book, Lucy?",
                            QuizId = 1,
                            SecondOption = "For my birthday.",
                            ThirdOption = "My uncle was."
                        },
                        new
                        {
                            Id = 6,
                            CorrectAnswer = 2,
                            CorrectAnswerPoints = 0,
                            FirstOption = "I know that.",
                            QuestionName = "Shall we go out for pizza tonight?",
                            QuizId = 1,
                            SecondOption = "It's very good.",
                            ThirdOption = "I'm too tired."
                        },
                        new
                        {
                            Id = 7,
                            CorrectAnswer = 2,
                            CorrectAnswerPoints = 0,
                            FirstOption = "That's fine!",
                            QuestionName = "Do you mind if I come too?",
                            QuizId = 1,
                            SecondOption = "I'd like to.",
                            ThirdOption = "I don't know if I can."
                        },
                        new
                        {
                            Id = 8,
                            CorrectAnswer = 2,
                            CorrectAnswerPoints = 0,
                            FirstOption = "Can I help you?",
                            QuestionName = "There's someone at the door.",
                            QuizId = 1,
                            SecondOption = "Well, go and answer it then.",
                            ThirdOption = "He's busy at the moment."
                        },
                        new
                        {
                            Id = 9,
                            CorrectAnswer = 3,
                            CorrectAnswerPoints = 0,
                            FirstOption = "I'd like one.",
                            QuestionName = "How much butter do I need for this cake?",
                            QuizId = 1,
                            SecondOption = "I'll use some.",
                            ThirdOption = "I'm not sure."
                        },
                        new
                        {
                            Id = 10,
                            CorrectAnswer = 2,
                            CorrectAnswerPoints = 0,
                            FirstOption = "Since last week.",
                            QuestionName = "How long are you here for?",
                            QuizId = 1,
                            SecondOption = "Ten days ago.",
                            ThirdOption = "Till tomorrow."
                        });
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QuizLogoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ielts"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Toeic"
                        });
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("character varying")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Roleclaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("character varying")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("character varying")
                        .HasColumnName("claim_value");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("roleclaim");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserBlock", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("BlockedUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("blocked_user_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.HasKey("UserId", "BlockedUserId")
                        .HasName("user_block_pkey");

                    b.HasIndex("BlockedUserId");

                    b.ToTable("user_block");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("character varying")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("character varying")
                        .HasColumnName("claim_value");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claim");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserExpLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<long>("AfterValue")
                        .HasColumnType("bigint")
                        .HasColumnName("after_value");

                    b.Property<long>("BeforeValue")
                        .HasColumnType("bigint")
                        .HasColumnName("before_value");

                    b.Property<long>("ChangeValue")
                        .HasColumnType("bigint")
                        .HasColumnName("change_value");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_exp_log");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserFriend", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("FriendId")
                        .HasColumnType("bigint")
                        .HasColumnName("friend_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<DateTime?>("FriendSince")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("friend_since");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("UserId", "FriendId")
                        .HasName("user_friend_pkey");

                    b.HasIndex("FriendId");

                    b.ToTable("user_friend");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayname")
                        .HasColumnType("character varying")
                        .HasColumnName("provider_displayname");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("user_login_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("user_login");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserLoginLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("login_date");

                    b.Property<string>("RequestIp")
                        .HasColumnType("character varying")
                        .HasColumnName("request_ip");

                    b.Property<string>("UserAgent")
                        .HasColumnType("character varying")
                        .HasColumnName("user_agent");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_login_log");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint")
                        .HasColumnName("receiver_id");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sender_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("user_message");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserPointLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<long>("AfterValue")
                        .HasColumnType("bigint")
                        .HasColumnName("after_value");

                    b.Property<long>("BeforeValue")
                        .HasColumnType("bigint")
                        .HasColumnName("before_value");

                    b.Property<int>("ChangeType")
                        .HasColumnType("integer")
                        .HasColumnName("change_type");

                    b.Property<long>("ChangeValue")
                        .HasColumnType("bigint")
                        .HasColumnName("change_value");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_point_log");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("user_role_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("UserId")
                        .HasName("user_token_pkey");

                    b.ToTable("user_token");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("character varying")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool?>("EmailMarketing")
                        .HasColumnType("boolean")
                        .HasColumnName("email_marketing");

                    b.Property<bool?>("EmailServiceNotification")
                        .HasColumnType("boolean")
                        .HasColumnName("email_service_notification");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying")
                        .HasColumnName("first_name");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("LastFriendrequestsRead")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_friendrequests_read");

                    b.Property<DateTime?>("LastMessagesRead")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_messages_read");

                    b.Property<string>("LastName")
                        .HasColumnType("character varying")
                        .HasColumnName("last_name");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("level")
                        .HasDefaultValueSql("1");

                    b.Property<bool?>("Locked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("locked")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("MfaSecret")
                        .HasColumnType("text")
                        .HasColumnName("mfa_secret");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("character varying")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("phone_number")
                        .HasDefaultValueSql("''::text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("PreferredLanguage")
                        .HasColumnType("character varying")
                        .HasColumnName("preferred_language");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("character varying")
                        .HasColumnName("security_stamp");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying")
                        .HasColumnName("user_name");

                    b.Property<int?>("VerificationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("verification_status");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.NewsComment", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Users", "User")
                        .WithMany("NewsComment")
                        .HasForeignKey("UserId")
                        .HasConstraintName("users_news_comment_user_id")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.NewsCommentReport", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.NewsComment", "NewsComment")
                        .WithMany("NewsCommentReport")
                        .HasForeignKey("NewsCommentId")
                        .HasConstraintName("news_comment_report_news_comment_id_fkey")
                        .IsRequired();

                    b.Navigation("NewsComment");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Question", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Roleclaim", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Role", "Role")
                        .WithMany("Roleclaim")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("roleclaim_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserBlock", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Users", "BlockedUser")
                        .WithMany("UserBlockBlockedUser")
                        .HasForeignKey("BlockedUserId")
                        .HasConstraintName("user_block_blocked_user_id_fkey")
                        .IsRequired();

                    b.HasOne("EJumping.DAL.EF.Entities.Users", "User")
                        .WithMany("UserBlockUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_block_user_id_fkey")
                        .IsRequired();

                    b.Navigation("BlockedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserClaim", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Users", "User")
                        .WithMany("UserClaim")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_claim_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserExpLog", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Users", "User")
                        .WithMany("UserExpLog")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_exp_log_user_id_fkey")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserFriend", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Users", "Friend")
                        .WithMany("UserFriendFriend")
                        .HasForeignKey("FriendId")
                        .HasConstraintName("user_friend_friend_id_fkey")
                        .IsRequired();

                    b.HasOne("EJumping.DAL.EF.Entities.Users", "User")
                        .WithMany("UserFriendUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_friend_user_id_fkey")
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserLogin", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Users", "User")
                        .WithMany("UserLogin")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_login_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserLoginLog", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Users", "User")
                        .WithMany("UserLoginLog")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_login_log_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserMessage", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Users", "Receiver")
                        .WithMany("UserMessageReceiver")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("user_message_receiver_id_fkey")
                        .IsRequired();

                    b.HasOne("EJumping.DAL.EF.Entities.Users", "Sender")
                        .WithMany("UserMessageSender")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("user_message_sender_id_fkey")
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserPointLog", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Users", "User")
                        .WithMany("UserPointLog")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_point_log_user_id_fkey")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserRole", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("user_role_role_id_fkey")
                        .IsRequired();

                    b.HasOne("EJumping.DAL.EF.Entities.Users", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_role_user_id_fkey")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.UserToken", b =>
                {
                    b.HasOne("EJumping.DAL.EF.Entities.Users", "User")
                        .WithOne("UserToken")
                        .HasForeignKey("EJumping.DAL.EF.Entities.UserToken", "UserId")
                        .HasConstraintName("user_token_user_id_fkey")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.NewsComment", b =>
                {
                    b.Navigation("NewsCommentReport");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Role", b =>
                {
                    b.Navigation("Roleclaim");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("EJumping.DAL.EF.Entities.Users", b =>
                {
                    b.Navigation("NewsComment");

                    b.Navigation("UserBlockBlockedUser");

                    b.Navigation("UserBlockUser");

                    b.Navigation("UserClaim");

                    b.Navigation("UserExpLog");

                    b.Navigation("UserFriendFriend");

                    b.Navigation("UserFriendUser");

                    b.Navigation("UserLogin");

                    b.Navigation("UserLoginLog");

                    b.Navigation("UserMessageReceiver");

                    b.Navigation("UserMessageSender");

                    b.Navigation("UserPointLog");

                    b.Navigation("UserRole");

                    b.Navigation("UserToken");
                });
#pragma warning restore 612, 618
        }
    }
}
