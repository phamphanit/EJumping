// <auto-generated />
using System;
using EJumping.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EJumping.Persistence.Migrations.AdsDb
{
    [DbContext(typeof(ejumpingDbContext))]
    partial class ejumpingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("EJumping.Domain.Entities.ConfigurationEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsSensitive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationEntries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a051aa5-bcd1-ea11-b098-ac728981bd15"),
                            IsSensitive = false,
                            Key = "SecurityHeaders:Test-Read-From-SqlServer",
                            Value = "this-is-read-from-sqlserver"
                        });
                });

            modelBuilder.Entity("EJumping.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<int>("CorrectAnswer")
                        .HasColumnType("integer");

                    b.Property<int>("CorrectAnswerPoints")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstOption")
                        .HasColumnType("text");

                    b.Property<string>("FourthOption")
                        .HasColumnType("text");

                    b.Property<string>("QuestionName")
                        .HasColumnType("text");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("SecondOption")
                        .HasColumnType("text");

                    b.Property<string>("ThirdOption")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("927dd143-5893-414e-aa82-ffeb036d0601"),
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "Would you like me to spell it?",
                            QuestionName = "Could you tell me your surname?",
                            QuizId = new Guid("12837d3d-793f-ea11-becb-5cea1d05f661"),
                            SecondOption = "Do you like my family name?",
                            ThirdOption = "How do I say that?",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("ad9c3ac5-08f3-42e0-9f56-0c10242cd012"),
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "It's in the garden.",
                            QuestionName = "This plant looks dead.",
                            QuizId = new Guid("12837d3d-793f-ea11-becb-5cea1d05f661"),
                            SecondOption = "It only needs some water.",
                            ThirdOption = "It's sleeping.",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("f1100c71-c629-476c-bb31-897dd35a14c6"),
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "Of course not.",
                            QuestionName = "I hope it doesn't rain.",
                            QuizId = new Guid("12837d3d-793f-ea11-becb-5cea1d05f661"),
                            SecondOption = "Will it be wet?",
                            ThirdOption = "So do I.",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("17fc1d9e-e62f-462e-9bb2-e03352b3619b"),
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "For ever.",
                            QuestionName = "Are you going to come inside soon?",
                            QuizId = new Guid("12837d3d-793f-ea11-becb-5cea1d05f661"),
                            SecondOption = "Not long.",
                            ThirdOption = "In a minute.",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("9d3d24bb-ac70-4e3a-b73a-c703b50e8773"),
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "I bought it.",
                            QuestionName = "Who gave you this book, Lucy?",
                            QuizId = new Guid("12837d3d-793f-ea11-becb-5cea1d05f661"),
                            SecondOption = "For my birthday.",
                            ThirdOption = "My uncle was.",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("3af2c53d-bfb8-4e63-ba00-2724be7f6980"),
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "I know that.",
                            QuestionName = "Shall we go out for pizza tonight?",
                            QuizId = new Guid("12837d3d-793f-ea11-becb-5cea1d05f661"),
                            SecondOption = "It's very good.",
                            ThirdOption = "I'm too tired.",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("60bb34dc-2856-4a12-a916-0e9ec9c4c6f5"),
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "That's fine!",
                            QuestionName = "Do you mind if I come too?",
                            QuizId = new Guid("12837d3d-793f-ea11-becb-5cea1d05f661"),
                            SecondOption = "I'd like to.",
                            ThirdOption = "I don't know if I can.",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("3d2b173a-2edb-417c-8442-055f5aaf789d"),
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "Can I help you?",
                            QuestionName = "There's someone at the door.",
                            QuizId = new Guid("12837d3d-793f-ea11-becb-5cea1d05f661"),
                            SecondOption = "Well, go and answer it then.",
                            ThirdOption = "He's busy at the moment.",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("db7c4909-1aeb-4732-9387-6ae51b3de065"),
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "I'd like one.",
                            QuestionName = "How much butter do I need for this cake?",
                            QuizId = new Guid("12837d3d-793f-ea11-becb-5cea1d05f661"),
                            SecondOption = "I'll use some.",
                            ThirdOption = "I'm not sure.",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("ba2fc523-7a46-4496-84c4-ce9a940f65a5"),
                            CorrectAnswer = 1,
                            CorrectAnswerPoints = 0,
                            FirstOption = "Since last week.",
                            QuestionName = "How long are you here for?",
                            QuizId = new Guid("12837d3d-793f-ea11-becb-5cea1d05f661"),
                            SecondOption = "Ten days ago.",
                            ThirdOption = "Till tomorrow.",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("EJumping.Domain.Entities.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QuizLogoUrl")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Quizs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12837d3d-793f-ea11-becb-5cea1d05f660"),
                            Name = "Ielts"
                        },
                        new
                        {
                            Id = new Guid("12837d3d-793f-ea11-becb-5cea1d05f661"),
                            Name = "Toeic"
                        });
                });

            modelBuilder.Entity("EJumping.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EJumping.Domain.Entities.RoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("EJumping.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12837d3d-793f-ea11-becb-5cea1d05f660"),
                            AccessFailedCount = 0,
                            Email = "vincent@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "VINCENT@GMAIL.COM",
                            NormalizedUserName = "TUSER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEI/8CTFnTa2n7lLHSdaBk39FL2LxJdx8cbYBk8LqKvPSdKMcoObbZzXyQvEjLNUNjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5M2QLL65J6H6VFIS7VZETKXY27KNVVYJ",
                            TwoFactorEnabled = false,
                            UserName = "tuser1"
                        });
                });

            modelBuilder.Entity("EJumping.Domain.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("EJumping.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("EJumping.Domain.Entities.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("TokenName")
                        .HasColumnType("text");

                    b.Property<string>("TokenValue")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("EJumping.Domain.Entities.Question", b =>
                {
                    b.HasOne("EJumping.Domain.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("EJumping.Domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("EJumping.Domain.Entities.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EJumping.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("EJumping.Domain.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("EJumping.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EJumping.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EJumping.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("EJumping.Domain.Entities.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EJumping.Domain.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EJumping.Domain.Entities.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EJumping.Domain.Entities.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
